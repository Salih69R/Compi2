%{
	#include <stdio.h>
	#include <iostream>
	#include "structs.hpp"
	

	
	int yylex();
	void yyerror(const char*);
	extern int yylineno;
	
	using namespace std;

	
	

%}




%token  VOID INT BYTE B BOOL ENUM TRUE FALSE RETURN ELSE WHILE BREAK CONTINUE SC COMMA LBRACE RBRACE ID NUM STRING
%right ASSIGN
%left OR
%left AND
%left EQUALOP
%left RELATIONOP
%left ADDOPS
%left MULTOPS
%right LPAREN RPAREN
%right IF ELSE
%right NOT


%%

Program : 		Enums Funcs 										
						{};


Funcs :			/*epsilon*/ 													
						{}
				| FuncDecl Funcs 													
						{};



FuncDecl :		RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE 	
						{};

Enums :			/*epsilon*/ 															
						{}
				| EnumDecl Enums 													
						{};

EnumDecl :		ENUM ID LBRACE EnumeratorList RBRACE SC 					
						{};

RetType :		Type 														
						{}
				| VOID 																
						{};

Formals :		/*epsilon*/ 												
						{}
				| FormalsList 														
						{};

FormalsList :	FormalDecl 													
						{}
				| FormalDecl COMMA FormalsList 									
						{};

FormalDecl :	Type ID 													
						{}
				| EnumType ID 														
						{};


EnumeratorList :	Enumerator 											
						{}
				| EnumeratorList COMMA Enumerator 									
						{};

Enumerator :		ID 															
						{};

Statements :	Statement 													
						{}
				| Statements Statement 												
						{};

Statement :		LBRACE Statements RBRACE 									
						{}
				| Type ID SC 														

						{}
				| EnumType ID SC 													
						{}
				| EnumDecl 															
		
						{}
				| Type ID ASSIGN Exp SC 											
						{}
				| EnumType ID ASSIGN Exp SC 										
						{}
				| ID ASSIGN Exp SC 													
		
						{}
				| Call SC 															
						{}
				| RETURN SC 														
						{}
				| RETURN Exp SC 													
						{}
				| IF LPAREN Exp RPAREN Statement 									
						{}
				| IF LPAREN Exp RPAREN Statement ELSE Statement 						
		
						{}
				| WHILE LPAREN Exp RPAREN Statement 									
						{}
				| BREAK SC 															
						{}
				| CONTINUE SC 														
						{};

Call :			ID LPAREN ExpList RPAREN 										
						{}
				| ID LPAREN RPAREN 													
						{};

ExpList :		Exp 														
						{}
				| Exp COMMA ExpList 												
						{};

Type :			INT 															
						{}
				| BYTE 																
						{}
				| BOOL 																
						{};

EnumType :		ENUM ID 													
						{};
						

Exp :			LPAREN Exp RPAREN 											
						
						{ 
							$$ = $2;
							delete $1;
							delete $3;
						 }
				| Exp ADDOPS Exp 													
						
						{}
				| Exp MULTOPS Exp 													
						{}

				| ID 																
						{	
							$$ = new EXP_T();
							$$->value = $1->value;
							$$->type = $1->type;
							delete $1;
						}

				| Call 																
						{
							$$ = new EXP_T();
							$$->value = $1->value;
							$$->type = $1->type;
							delete $1;
						}

				| NUM 																
						{
							$$ = new EXP_T();
							$$->value = $1->value;
							$$->type = $1->type;
							delete $1;
						}

				| NUM B 															
						{
							$$ = new EXP_T();
							$$->value = $1->value;
							$$->type = $1->type;
							delete $1;
						}

				| STRING 															
						{
							$$ = new EXP_T();
							$$->value = $1->value;
							$$->type = $1->type;
							delete $1;
						}

				| TRUE 																
						{
							$$ = new EXP_T();
							$$->value = $1->value;
							$$->type = BOOL_t;
							delete $1;
						}

				| FALSE 															
						{
							$$ = new EXP_T();
							$$->value = $1->val;
							$$->type = BOOL_t;
							delete $1;
						}
						
				| NOT Exp 															
						{}


				| Exp AND Exp 														
						{}

				| Exp OR Exp 														
						{}

				| Exp RELATIONOP Exp 												
						{}

				| Exp EQUALOP Exp 													
						{}

				| LPAREN Type RPAREN Exp 											
						{};


%%



int main()
{
    return yyparse();
}

void yyerror(char const* error){
//	errorSyn(yylineno);
	exit(0);
}


